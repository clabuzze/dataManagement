Data Management Tips
========================================================
author: Charlie Labuzzetta
date: `r format(Sys.time(), "%B %d, %Y")`
autosize: true
incremental: true
depends: dplyr, dataManagement, tidyr


STRIPS-2 Data
========================================================

![caption](strips.png) ![caption](github.png)

- Over 350,000 collected datapoints
- Over 20,000 quadrat estimations
- Nearly 2,500 nest checks

## And that's just 2015-2016!


How to Make Data Storage and Analysis Easier?
========================================================

- Naming Standards
  - Filenames
  - Column names
- Data Types
  - Dates
  - Booleans vs. Yes/No
- Database Design
  - When to make a new table?
  - To ID or not to ID


Naming Standards - Poor Example
========================================================

In the column names, look for:
  - Inconsistency
  - Spaces / Weird Characters

```{r echo=FALSE}
kable(dplyr::select(dataManagement::sightings_bad, -comments, -Lat, -Lon))
```


Naming Standards - Better?
========================================================

In the column names, look for:
  - full words
  - lower case with underscores
  
```{r echo=FALSE}
kable(dplyr::select(dataManagement::sightings, -comments))
```


Discussion - Naming Standards
========================================================

There are many ways to name files / columns with consistency:
  - lowercase_underscore
  - camelCaseNoSpaces
  - CapitalizeEveryWord
  - PLEASE_DONT_DO_THIS
  
**Suggestion:** lowercase_underscore

Important People in the "R" World suggest: http://r-pkgs.had.co.nz/style.html


Data Types - Dates
========================================================

Confession: Dates are the worst...

There are so many ways to store dates:
  - 2000-07-04 14:00:00
  - 2000-07-04 2:00 PM
  - 2000/07/04 02:00:00 PM
  - 04/07/2000

```{r echo=FALSE}
  
kable(dplyr::select(dataManagement::sightings_bad, -comments, -Lat, -Lon))

```
  
Data Types - Dates
========================================================

**Suggestion:** When possible, YYYY-mm-dd hh:mm:ss
  - Stores in chronological order
  - Bypasses AM/PM Errors
  - Reduces Month/Day confusion
  
**Suggestion:** If using R, look into the *lubridate* package

Try to store dates and times in the same column

```{r echo=FALSE}

kable(dplyr::select(dataManagement::sightings, -comments))

```


Data Types - Units
========================================================

How/where should measurement units be stored?
  - Avoid putting units in column names
  - Make documentation / metadata files
  - Consider changing booleans to "Yes"/"No"
  
Look at Jarad Niemi's RDataPackageTemplate: https://github.com/jarad/RDataPackageTemplate

What's wrong with the table below?

```{r echo=FALSE}

kable(dplyr::select(dataManagement::sightings_bad, -comments, -Lat, -Lon))

```


Database Design - Goals
========================================================


A good database will (be):
  - Reduce Redundancy
  - Reduce NA's
  - Easy to Manipulate
  
Again, when making an R Data Package, look at: https://github.com/jarad/RDataPackageTemplate
  - Store raw data in /data-raw
  - Clean raw data with R scripts
  - Import clean data to R package
  - Easily manipulate and analyze clean data
  
  
Database Design - Thought Process
========================================================

How to think about database design: